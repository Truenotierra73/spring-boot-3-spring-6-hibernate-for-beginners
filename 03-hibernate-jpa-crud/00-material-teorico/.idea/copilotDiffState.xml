<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/03-jpa-annotations.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/03-jpa-annotations.md" />
              <option name="updatedContent" value="# Proceso de desarrollo con JPA en Spring Boot&#10;&#10;A continuación se describe el proceso recomendado para desarrollar una aplicación con JPA en Spring Boot, siguiendo buenas prácticas y utilizando ejemplos para cada paso.&#10;&#10;## 1. Configuración del proyecto&#10;&#10;Agrega las dependencias necesarias en tu archivo `pom.xml`:&#10;&#10;```xml&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;    &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;    &lt;scope&gt;runtime&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;```&#10;&#10;## 2. Configuración de la base de datos&#10;&#10;En `src/main/resources/application.properties`:&#10;&#10;```properties&#10;spring.datasource.url=jdbc:mysql://localhost:3306/mi_base_de_datos&#10;spring.datasource.username=usuario&#10;spring.datasource.password=contraseña&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect&#10;```&#10;&#10;## 3. Definición de entidades JPA&#10;&#10;Crea una clase anotada con `@Entity` que represente una tabla:&#10;&#10;```java&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;clientes&quot;)&#10;public class Cliente {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, length = 100)&#10;    private String nombre;&#10;&#10;    // ...otros atributos, getters y setters...&#10;}&#10;```&#10;&#10;## 4. Creación de repositorios&#10;&#10;Crea una interfaz que extienda `JpaRepository`:&#10;&#10;```java&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface ClienteRepository extends JpaRepository&lt;Cliente, Long&gt; {&#10;    // Métodos personalizados si es necesario&#10;}&#10;```&#10;&#10;## 5. Implementación de servicios&#10;&#10;Crea una clase de servicio para la lógica de negocio:&#10;&#10;```java&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;&#10;@Service&#10;public class ClienteService {&#10;    @Autowired&#10;    private ClienteRepository clienteRepository;&#10;&#10;    public List&lt;Cliente&gt; listarTodos() {&#10;        return clienteRepository.findAll();&#10;    }&#10;    // ...otros métodos de negocio...&#10;}&#10;```&#10;&#10;## 6. Controladores REST&#10;&#10;Crea un controlador para exponer la API:&#10;&#10;```java&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/clientes&quot;)&#10;public class ClienteController {&#10;    private final ClienteService clienteService;&#10;&#10;    public ClienteController(ClienteService clienteService) {&#10;        this.clienteService = clienteService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Cliente&gt; obtenerClientes() {&#10;        return clienteService.listarTodos();&#10;    }&#10;    // ...otros endpoints...&#10;}&#10;```&#10;&#10;## 7. Pruebas y validación&#10;&#10;Utiliza pruebas unitarias e integrales para asegurar la calidad del código.&#10;&#10;---&#10;&#10;# Anotaciones JPA más importantes&#10;&#10;Las anotaciones JPA permiten mapear clases Java a tablas de la base de datos y definir relaciones y restricciones. A continuación, se listan las más utilizadas:&#10;&#10;- `@Entity`: Marca la clase como una entidad JPA.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Entity&#10;    public class Producto { ... }&#10;    ```&#10;&#10;- `@Table`: Especifica el nombre de la tabla.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Table(name = &quot;productos&quot;)&#10;    ```&#10;&#10;- `@Id`: Indica el campo clave primaria.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Id&#10;    private Long id;&#10;    ```&#10;&#10;- `@GeneratedValue`: Estrategia de generación de la clave primaria.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    ```&#10;&#10;- `@Column`: Configura detalles de la columna.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Column(nullable = false, length = 50)&#10;    private String nombre;&#10;    ```&#10;&#10;- `@OneToOne`, `@OneToMany`, `@ManyToOne`, `@ManyToMany`: Definen relaciones entre entidades.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;categoria_id&quot;)&#10;    private Categoria categoria;&#10;    ```&#10;&#10;- `@JoinColumn`: Especifica la columna de unión en relaciones.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @JoinColumn(name = &quot;cliente_id&quot;)&#10;    ```&#10;&#10;- `@Transient`: Marca un campo que no será persistido.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Transient&#10;    private int edadTemporal;&#10;    ```&#10;&#10;- `@Embedded` y `@Embeddable`: Para objetos embebidos.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Embeddable&#10;    public class Direccion { ... }&#10;    @Embedded&#10;    private Direccion direccion;&#10;    ```&#10;&#10;---&#10;&#10;# Estrategias de generación de ID&#10;&#10;JPA permite varias estrategias para la generación de claves primarias:&#10;&#10;- `GenerationType.IDENTITY`: Delega la generación al motor de la base de datos (autoincremental en MySQL).&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    ```&#10;&#10;- `GenerationType.SEQUENCE`: Utiliza una secuencia de la base de datos (más común en Oracle o PostgreSQL).&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;cliente_seq&quot;)&#10;    @SequenceGenerator(name = &quot;cliente_seq&quot;, sequenceName = &quot;cliente_seq&quot;, allocationSize = 1)&#10;    ```&#10;&#10;- `GenerationType.TABLE`: Utiliza una tabla especial para generar los IDs.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.TABLE, generator = &quot;cliente_tabla&quot;)&#10;    @TableGenerator(name = &quot;cliente_tabla&quot;, table = &quot;secuencias&quot;, pkColumnName = &quot;nombre&quot;, valueColumnName = &quot;valor&quot;, pkColumnValue = &quot;cliente&quot;, allocationSize = 1)&#10;    ```&#10;&#10;- `GenerationType.AUTO`: Delega a JPA la estrategia más adecuada según la base de datos.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    ```&#10;&#10;## Estrategia personalizada de generación de ID&#10;&#10;Puedes crear una estrategia personalizada implementando la interfaz `IdentifierGenerator` de Hibernate:&#10;&#10;```java&#10;import org.hibernate.engine.spi.SharedSessionContractImplementor;&#10;import org.hibernate.id.IdentifierGenerator;&#10;import java.io.Serializable;&#10;import java.util.UUID;&#10;&#10;public class CustomIdGenerator implements IdentifierGenerator {&#10;    @Override&#10;    public Serializable generate(SharedSessionContractImplementor session, Object object) {&#10;        return UUID.randomUUID().toString();&#10;    }&#10;}&#10;```&#10;&#10;Y luego usarla en tu entidad:&#10;&#10;```java&#10;@Entity&#10;public class Cliente {&#10;    @Id&#10;    @GeneratedValue(generator = &quot;custom-id&quot;)&#10;    @GenericGenerator(name = &quot;custom-id&quot;, strategy = &quot;paquete.CustomIdGenerator&quot;)&#10;    private String id;&#10;    // ...&#10;}&#10;```&#10;&#10;&gt; **Nota:** Cambia `paquete.CustomIdGenerator` por el paquete real donde se encuentra tu clase generadora.&#10;&#10;---&#10;&#10;&gt; **Buenas prácticas:**&#10;&gt; - Utiliza nombres descriptivos para entidades y atributos.&#10;&gt; - Aplica validaciones y restricciones en las entidades.&#10;&gt; - Separa la lógica de negocio en servicios.&#10;&gt; - Utiliza DTOs para exponer datos en la API.&#10;&gt; - Documenta tu código y utiliza comentarios en español.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/03-jpa-development-process.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/03-jpa-development-process.md" />
              <option name="originalContent" value="# Proceso de desarrollo con JPA en Spring Boot&#10;&#10;A continuación se describe el proceso recomendado para desarrollar una aplicación con JPA en Spring Boot, siguiendo buenas prácticas y utilizando ejemplos para cada paso.&#10;&#10;## 1. Configuración del proyecto&#10;&#10;Agrega las dependencias necesarias en tu archivo `pom.xml`:&#10;&#10;```xml&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;    &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;    &lt;scope&gt;runtime&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;```&#10;&#10;## 2. Configuración de la base de datos&#10;&#10;En `src/main/resources/application.properties`:&#10;&#10;```properties&#10;spring.datasource.url=jdbc:mysql://localhost:3306/mi_base_de_datos&#10;spring.datasource.username=usuario&#10;spring.datasource.password=contraseña&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect&#10;```&#10;&#10;## 3. Definición de entidades JPA&#10;&#10;Crea una clase anotada con `@Entity` que represente una tabla:&#10;&#10;```java&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;clientes&quot;)&#10;public class Cliente {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, length = 100)&#10;    private String nombre;&#10;&#10;    // ...otros atributos, getters y setters...&#10;}&#10;```&#10;&#10;## 4. Creación de repositorios&#10;&#10;Crea una interfaz que extienda `JpaRepository`:&#10;&#10;```java&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface ClienteRepository extends JpaRepository&lt;Cliente, Long&gt; {&#10;    // Métodos personalizados si es necesario&#10;}&#10;```&#10;&#10;## 5. Implementación de servicios&#10;&#10;Crea una clase de servicio para la lógica de negocio:&#10;&#10;```java&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;&#10;@Service&#10;public class ClienteService {&#10;    @Autowired&#10;    private ClienteRepository clienteRepository;&#10;&#10;    public List&lt;Cliente&gt; listarTodos() {&#10;        return clienteRepository.findAll();&#10;    }&#10;    // ...otros métodos de negocio...&#10;}&#10;```&#10;&#10;## 6. Controladores REST&#10;&#10;Crea un controlador para exponer la API:&#10;&#10;```java&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/clientes&quot;)&#10;public class ClienteController {&#10;    private final ClienteService clienteService;&#10;&#10;    public ClienteController(ClienteService clienteService) {&#10;        this.clienteService = clienteService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Cliente&gt; obtenerClientes() {&#10;        return clienteService.listarTodos();&#10;    }&#10;    // ...otros endpoints...&#10;}&#10;```&#10;&#10;## 7. Pruebas y validación&#10;&#10;Utiliza pruebas unitarias e integrales para asegurar la calidad del código.&#10;&#10;---&#10;&#10;# Anotaciones JPA más importantes&#10;&#10;Las anotaciones JPA permiten mapear clases Java a tablas de la base de datos y definir relaciones y restricciones. A continuación, se listan las más utilizadas, indicando si es posible especificar un nombre alternativo como parámetro:&#10;&#10;- `@Entity`&#10;  - **Descripción:**&#10;    La anotación `@Entity` indica que una clase es una entidad JPA, es decir, que su instancia será gestionada por el EntityManager de JPA y se mapeará a una tabla en la base de datos. Cada objeto de la clase representa una fila de la tabla correspondiente.&#10;    - Permite mapear la clase a una tabla de la base de datos.&#10;    - Es posible especificar un nombre alternativo para la entidad usando el parámetro `name`, por ejemplo: `@Entity(name = &quot;NombreAlternativo&quot;)`. Si no se especifica, el nombre de la entidad será el de la clase.&#10;    - La clase debe tener un campo anotado con `@Id` que actúe como clave primaria.&#10;    - El nombre de la tabla, por defecto, será el mismo que el de la clase, pero puede personalizarse con la anotación `@Table`.&#10;    - Se pueden definir relaciones, restricciones y configuraciones adicionales mediante otras anotaciones JPA.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Entity(name = &quot;ProductoEntity&quot;)&#10;    public class Producto { ... }&#10;    ```&#10;    ```java&#10;    // Ejemplo completo&#10;    import jakarta.persistence.Entity;&#10;    import jakarta.persistence.Id;&#10;    &#10;    @Entity(name = &quot;ClienteEntidad&quot;)&#10;    public class Cliente {&#10;        @Id&#10;        private Long id;&#10;        // ...otros atributos y métodos...&#10;    }&#10;    ```&#10;    &gt; **Nota:** Si una clase no está anotada con `@Entity`, JPA no la gestionará ni la mapeará a ninguna tabla en la base de datos.&#10;&#10;- `@Table`: Especifica el nombre de la tabla.&#10;  - **Descripción:**&#10;    La anotación `@Table` se utiliza para indicar el nombre de la tabla de la base de datos a la que se mapeará la entidad JPA. Por defecto, si no se especifica, el nombre de la tabla será el mismo que el de la clase. Permite personalizar el nombre de la tabla y otros aspectos como el esquema, los índices y las restricciones únicas.&#10;    - Es posible especificar un nombre alternativo para la tabla usando el parámetro `name`, por ejemplo: `@Table(name = &quot;productos&quot;)`.&#10;    - También se pueden definir parámetros adicionales como `schema`, `catalog`, `uniqueConstraints` e `indexes`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Table(name = &quot;productos&quot;)&#10;    public class Producto { ... }&#10;    ```&#10;    ```java&#10;    // Ejemplo con parámetros adicionales&#10;    @Table(name = &quot;clientes&quot;, schema = &quot;public&quot;, uniqueConstraints = {@UniqueConstraint(columnNames = {&quot;email&quot;})})&#10;    public class Cliente { ... }&#10;    ```&#10;    &gt; **Nota:** Si no se utiliza `@Table`, la entidad se mapeará a una tabla con el mismo nombre que la clase por defecto.&#10;&#10;- `@Id`: Indica el campo clave primaria.&#10;  - **¿Permite nombre alternativo?** No, esta anotación no admite parámetros de nombre.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Id&#10;    private Long id;&#10;    ```&#10;&#10;- `@GeneratedValue`: Estrategia de generación de la clave primaria.&#10;  - **¿Permite nombre alternativo?** Sí, mediante el parámetro `generator` para especificar un generador personalizado.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @GeneratedValue(generator = &quot;miGeneradorPersonalizado&quot;)&#10;    ```&#10;&#10;- `@Column`: Configura detalles de la columna.&#10;  - **¿Permite nombre alternativo?** Sí, mediante el parámetro `name`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Column(name = &quot;nombre_columna&quot;, nullable = false, length = 50)&#10;    private String nombre;&#10;    ```&#10;&#10;- `@OneToOne`, `@OneToMany`, `@ManyToOne`, `@ManyToMany`: Definen relaciones entre entidades.&#10;  - **¿Permite nombre alternativo?** No directamente, pero se puede especificar el nombre de la columna de unión usando `@JoinColumn`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;categoria_id&quot;)&#10;    private Categoria categoria;&#10;    ```&#10;&#10;- `@JoinColumn`: Especifica la columna de unión en relaciones.&#10;  - **¿Permite nombre alternativo?** Sí, mediante el parámetro `name`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @JoinColumn(name = &quot;cliente_id&quot;)&#10;    ```&#10;&#10;- `@Transient`: Marca un campo que no será persistido.&#10;  - **¿Permite nombre alternativo?** No, esta anotación no admite parámetros de nombre.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Transient&#10;    private int edadTemporal;&#10;    ```&#10;&#10;- `@Embedded` y `@Embeddable`: Para objetos embebidos.&#10;  - **¿Permite nombre alternativo?**&#10;    - `@Embedded`: No admite nombre alternativo.&#10;    - `@Embeddable`: No admite nombre alternativo.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Embeddable&#10;    public class Direccion { ... }&#10;    @Embedded&#10;    private Direccion direccion;&#10;    ```&#10;&#10;---&#10;&#10;# Estrategias de generación de ID&#10;&#10;JPA permite varias estrategias para la generación de claves primarias:&#10;&#10;- `GenerationType.IDENTITY`: Delega la generación al motor de la base de datos (autoincremental en MySQL).&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    ```&#10;&#10;- `GenerationType.SEQUENCE`: Utiliza una secuencia de la base de datos (más común en Oracle o PostgreSQL).&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;cliente_seq&quot;)&#10;    @SequenceGenerator(name = &quot;cliente_seq&quot;, sequenceName = &quot;cliente_seq&quot;, allocationSize = 1)&#10;    ```&#10;&#10;- `GenerationType.TABLE`: Utiliza una tabla especial para generar los IDs.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.TABLE, generator = &quot;cliente_tabla&quot;)&#10;    @TableGenerator(name = &quot;cliente_tabla&quot;, table = &quot;secuencias&quot;, pkColumnName = &quot;nombre&quot;, valueColumnName = &quot;valor&quot;, pkColumnValue = &quot;cliente&quot;, allocationSize = 1)&#10;    ```&#10;&#10;- `GenerationType.AUTO`: Delega a JPA la estrategia más adecuada según la base de datos.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    ```&#10;&#10;## Estrategia personalizada de generación de ID&#10;&#10;Puedes crear una estrategia personalizada implementando la interfaz `IdentifierGenerator` de Hibernate:&#10;&#10;```java&#10;import org.hibernate.engine.spi.SharedSessionContractImplementor;&#10;import org.hibernate.id.IdentifierGenerator;&#10;import java.io.Serializable;&#10;import java.util.UUID;&#10;&#10;public class CustomIdGenerator implements IdentifierGenerator {&#10;    @Override&#10;    public Serializable generate(SharedSessionContractImplementor session, Object object) {&#10;        return UUID.randomUUID().toString();&#10;    }&#10;}&#10;```&#10;&#10;Y luego usarla en tu entidad:&#10;&#10;```java&#10;@Entity&#10;public class Cliente {&#10;    @Id&#10;    @GeneratedValue(generator = &quot;custom-id&quot;)&#10;    @GenericGenerator(name = &quot;custom-id&quot;, strategy = &quot;paquete.CustomIdGenerator&quot;)&#10;    private String id;&#10;    // ...&#10;}&#10;```&#10;&#10;&gt; **Nota:** Cambia `paquete.CustomIdGenerator` por el paquete real donde se encuentra tu clase generadora.&#10;&#10;---&#10;&#10;&gt; **Buenas prácticas:**&#10;&gt; - Utiliza nombres descriptivos para entidades y atributos.&#10;&gt; - Aplica validaciones y restricciones en las entidades.&#10;&gt; - Separa la lógica de negocio en servicios.&#10;&gt; - Utiliza DTOs para exponer datos en la API.&#10;&gt; - Documenta tu código y utiliza comentarios en español.&#10;&#10;# Referencias oficiales&#10;&#10;- [Documentación oficial de Spring Data JPA](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/)&#10;- [Documentación oficial de Hibernate ORM](https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html)&#10;- [Documentación oficial de JPA (Jakarta Persistence)](https://jakarta.ee/specifications/persistence/3.1/jakarta-persistence-spec-3.1.html)&#10;- [Documentación oficial de Spring Boot](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)&#10;- [Documentación oficial de MySQL](https://dev.mysql.com/doc/)&#10;" />
              <option name="updatedContent" value="# Proceso de desarrollo con JPA en Spring Boot&#10;&#10;A continuación se describe el proceso recomendado para desarrollar una aplicación con JPA en Spring Boot, siguiendo buenas prácticas y utilizando ejemplos para cada paso.&#10;&#10;## 1. Configuración del proyecto&#10;&#10;Agrega las dependencias necesarias en tu archivo `pom.xml`:&#10;&#10;```xml&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;    &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;    &lt;scope&gt;runtime&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;```&#10;&#10;## 2. Configuración de la base de datos&#10;&#10;En `src/main/resources/application.properties`:&#10;&#10;```properties&#10;spring.datasource.url=jdbc:mysql://localhost:3306/mi_base_de_datos&#10;spring.datasource.username=usuario&#10;spring.datasource.password=contraseña&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect&#10;```&#10;&#10;## 3. Definición de entidades JPA&#10;&#10;Crea una clase anotada con `@Entity` que represente una tabla:&#10;&#10;```java&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;clientes&quot;)&#10;public class Cliente {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, length = 100)&#10;    private String nombre;&#10;&#10;    // ...otros atributos, getters y setters...&#10;}&#10;```&#10;&#10;## 4. Creación de repositorios&#10;&#10;Crea una interfaz que extienda `JpaRepository`:&#10;&#10;```java&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface ClienteRepository extends JpaRepository&lt;Cliente, Long&gt; {&#10;    // Métodos personalizados si es necesario&#10;}&#10;```&#10;&#10;## 5. Implementación de servicios&#10;&#10;Crea una clase de servicio para la lógica de negocio:&#10;&#10;```java&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;&#10;@Service&#10;public class ClienteService {&#10;    @Autowired&#10;    private ClienteRepository clienteRepository;&#10;&#10;    public List&lt;Cliente&gt; listarTodos() {&#10;        return clienteRepository.findAll();&#10;    }&#10;    // ...otros métodos de negocio...&#10;}&#10;```&#10;&#10;## 6. Controladores REST&#10;&#10;Crea un controlador para exponer la API:&#10;&#10;```java&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/clientes&quot;)&#10;public class ClienteController {&#10;    private final ClienteService clienteService;&#10;&#10;    public ClienteController(ClienteService clienteService) {&#10;        this.clienteService = clienteService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Cliente&gt; obtenerClientes() {&#10;        return clienteService.listarTodos();&#10;    }&#10;    // ...otros endpoints...&#10;}&#10;```&#10;&#10;## 7. Pruebas y validación&#10;&#10;Utiliza pruebas unitarias e integrales para asegurar la calidad del código.&#10;&#10;---&#10;&#10;# Anotaciones JPA más importantes&#10;&#10;Las anotaciones JPA permiten mapear clases Java a tablas de la base de datos y definir relaciones y restricciones. A continuación, se listan las más utilizadas, indicando si es posible especificar un nombre alternativo como parámetro:&#10;&#10;- `@Entity`&#10;  - **Descripción:**&#10;    La anotación `@Entity` indica que una clase es una entidad JPA, es decir, que su instancia será gestionada por el EntityManager de JPA y se mapeará a una tabla en la base de datos. Cada objeto de la clase representa una fila de la tabla correspondiente.&#10;    - Permite mapear la clase a una tabla de la base de datos.&#10;    - Es posible especificar un nombre alternativo para la entidad usando el parámetro `name`, por ejemplo: `@Entity(name = &quot;NombreAlternativo&quot;)`. Si no se especifica, el nombre de la entidad será el de la clase.&#10;    - La clase debe tener un campo anotado con `@Id` que actúe como clave primaria.&#10;    - El nombre de la tabla, por defecto, será el mismo que el de la clase, pero puede personalizarse con la anotación `@Table`.&#10;    - Se pueden definir relaciones, restricciones y configuraciones adicionales mediante otras anotaciones JPA.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Entity(name = &quot;ProductoEntity&quot;)&#10;    public class Producto { ... }&#10;    ```&#10;    ```java&#10;    // Ejemplo completo&#10;    import jakarta.persistence.Entity;&#10;    import jakarta.persistence.Id;&#10;    &#10;    @Entity(name = &quot;ClienteEntidad&quot;)&#10;    public class Cliente {&#10;        @Id&#10;        private Long id;&#10;        // ...otros atributos y métodos...&#10;    }&#10;    ```&#10;    &gt; **Nota:** Si una clase no está anotada con `@Entity`, JPA no la gestionará ni la mapeará a ninguna tabla en la base de datos.&#10;&#10;- `@Table`: Especifica el nombre de la tabla.&#10;  - **Descripción:**&#10;    La anotación `@Table` se utiliza para indicar el nombre de la tabla de la base de datos a la que se mapeará la entidad JPA. Por defecto, si no se especifica, el nombre de la tabla será el mismo que el de la clase. Permite personalizar el nombre de la tabla y otros aspectos como el esquema, los índices y las restricciones únicas.&#10;    - Es posible especificar un nombre alternativo para la tabla usando el parámetro `name`, por ejemplo: `@Table(name = &quot;productos&quot;)`.&#10;    - También se pueden definir parámetros adicionales como `schema`, `catalog`, `uniqueConstraints` e `indexes`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Table(name = &quot;productos&quot;)&#10;    public class Producto { ... }&#10;    ```&#10;    ```java&#10;    // Ejemplo con parámetros adicionales&#10;    @Table(name = &quot;clientes&quot;, schema = &quot;public&quot;, uniqueConstraints = {@UniqueConstraint(columnNames = {&quot;email&quot;})})&#10;    public class Cliente { ... }&#10;    ```&#10;    &gt; **Nota:** Si no se utiliza `@Table`, la entidad se mapeará a una tabla con el mismo nombre que la clase por defecto.&#10;&#10;- `@Id`: Indica el campo clave primaria.&#10;  - **¿Permite nombre alternativo?** No, esta anotación no admite parámetros de nombre.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Id&#10;    private Long id;&#10;    ```&#10;&#10;- `@GeneratedValue`: Estrategia de generación de la clave primaria.&#10;  - **¿Permite nombre alternativo?** Sí, mediante el parámetro `generator` para especificar un generador personalizado.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @GeneratedValue(generator = &quot;miGeneradorPersonalizado&quot;)&#10;    ```&#10;&#10;- `@Column`: Configura detalles de la columna.&#10;  - **¿Permite nombre alternativo?** Sí, mediante el parámetro `name`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Column(name = &quot;nombre_columna&quot;, nullable = false, length = 50)&#10;    private String nombre;&#10;    ```&#10;&#10;- `@OneToOne`, `@OneToMany`, `@ManyToOne`, `@ManyToMany`: Definen relaciones entre entidades.&#10;  - **¿Permite nombre alternativo?** No directamente, pero se puede especificar el nombre de la columna de unión usando `@JoinColumn`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;categoria_id&quot;)&#10;    private Categoria categoria;&#10;    ```&#10;&#10;- `@JoinColumn`: Especifica la columna de unión en relaciones.&#10;  - **¿Permite nombre alternativo?** Sí, mediante el parámetro `name`.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @JoinColumn(name = &quot;cliente_id&quot;)&#10;    ```&#10;&#10;- `@Transient`: Marca un campo que no será persistido.&#10;  - **¿Permite nombre alternativo?** No, esta anotación no admite parámetros de nombre.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Transient&#10;    private int edadTemporal;&#10;    ```&#10;&#10;- `@Embedded` y `@Embeddable`: Para objetos embebidos.&#10;  - **¿Permite nombre alternativo?**&#10;    - `@Embedded`: No admite nombre alternativo.&#10;    - `@Embeddable`: No admite nombre alternativo.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @Embeddable&#10;    public class Direccion { ... }&#10;    @Embedded&#10;    private Direccion direccion;&#10;    ```&#10;&#10;---&#10;&#10;# Estrategias de generación de ID&#10;&#10;JPA permite varias estrategias para la generación de claves primarias:&#10;&#10;- `GenerationType.IDENTITY`: Delega la generación al motor de la base de datos (autoincremental en MySQL).&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    ```&#10;&#10;- `GenerationType.SEQUENCE`: Utiliza una secuencia de la base de datos (más común en Oracle o PostgreSQL).&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;cliente_seq&quot;)&#10;    @SequenceGenerator(name = &quot;cliente_seq&quot;, sequenceName = &quot;cliente_seq&quot;, allocationSize = 1)&#10;    ```&#10;&#10;- `GenerationType.TABLE`: Utiliza una tabla especial para generar los IDs.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.TABLE, generator = &quot;cliente_tabla&quot;)&#10;    @TableGenerator(name = &quot;cliente_tabla&quot;, table = &quot;secuencias&quot;, pkColumnName = &quot;nombre&quot;, valueColumnName = &quot;valor&quot;, pkColumnValue = &quot;cliente&quot;, allocationSize = 1)&#10;    ```&#10;&#10;- `GenerationType.AUTO`: Delega a JPA la estrategia más adecuada según la base de datos.&#10;  - **Ejemplo:**&#10;    ```java&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    ```&#10;&#10;## Estrategia personalizada de generación de ID&#10;&#10;Puedes crear una estrategia personalizada implementando la interfaz `IdentifierGenerator` de Hibernate:&#10;&#10;```java&#10;import org.hibernate.engine.spi.SharedSessionContractImplementor;&#10;import org.hibernate.id.IdentifierGenerator;&#10;import java.io.Serializable;&#10;import java.util.UUID;&#10;&#10;public class CustomIdGenerator implements IdentifierGenerator {&#10;    @Override&#10;    public Serializable generate(SharedSessionContractImplementor session, Object object) {&#10;        return UUID.randomUUID().toString();&#10;    }&#10;}&#10;```&#10;&#10;Y luego usarla en tu entidad:&#10;&#10;```java&#10;@Entity&#10;public class Cliente {&#10;    @Id&#10;    @GeneratedValue(generator = &quot;custom-id&quot;)&#10;    @GenericGenerator(name = &quot;custom-id&quot;, strategy = &quot;paquete.CustomIdGenerator&quot;)&#10;    private String id;&#10;    // ...&#10;}&#10;```&#10;&#10;&gt; **Nota:** Cambia `paquete.CustomIdGenerator` por el paquete real donde se encuentra tu clase generadora.&#10;&#10;---&#10;&#10;&gt; **Buenas prácticas:**&#10;&gt; - Utiliza nombres descriptivos para entidades y atributos.&#10;&gt; - Aplica validaciones y restricciones en las entidades.&#10;&gt; - Separa la lógica de negocio en servicios.&#10;&gt; - Utiliza DTOs para exponer datos en la API.&#10;&gt; - Documenta tu código y utiliza comentarios en español.&#10;&#10;# Referencias oficiales&#10;&#10;- [Documentación oficial de Spring Data JPA](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/)&#10;- [Documentación oficial de Hibernate ORM](https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html)&#10;- [Documentación oficial de JPA (Jakarta Persistence)](https://jakarta.ee/specifications/persistence/3.1/jakarta-persistence-spec-3.1.html)&#10;- [Documentación oficial de Spring Boot](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)&#10;- [Documentación oficial de MySQL](https://dev.mysql.com/doc/)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>